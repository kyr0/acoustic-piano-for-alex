[{"/Users/aron/Code/acoustic-piano-for-alex/src/App.js":"1","/Users/aron/Code/acoustic-piano-for-alex/src/Score.js":"2"},{"size":4365,"mtime":1611500581510,"results":"3","hashOfConfig":"4"},{"size":2031,"mtime":1611500279118,"results":"5","hashOfConfig":"4"},{"filePath":"6","messages":"7","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},"18o49yt",{"filePath":"8","messages":"9","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"10"},"/Users/aron/Code/acoustic-piano-for-alex/src/App.js",["11","12"],"/Users/aron/Code/acoustic-piano-for-alex/src/Score.js",["13"],"import React, { useRef, useEffect } from 'react'\nimport VexFlow from 'vexflow'\n\nconst VF = VexFlow.Flow\nconst { Formatter, Renderer, Stave, StaveNote } = VF\n\nconst clefAndTimeWidth = 60\n\nlet renderer;\nlet rendered;\n\nexport function Score({\n  staves = [],\n  clef = 'treble',\n  timeSignature = '4/4',\n  width = 450,\n  height = 150,\n}) {\n  const container = useRef()\n\n  useEffect(() => {\n    if (!renderer) {\n      renderer = new Renderer(\n        container.current,\n        Renderer.Backends.SVG\n      )\n    }\n\n    renderer.resize(width, height)\n    const context = renderer.getContext()\n\n    if (rendered && container.current.querySelector('svg')) {\n        // removes all what has been rendered before\n        container.current.querySelector('svg').innerHTML = ''\n    }\n\n    context.setFont('Arial', 10, '').setBackgroundFillStyle('#eed')\n    const staveWidth = (width - clefAndTimeWidth) / staves.length\n\n    let currX = 0\n    staves.forEach((notes, i) => {\n      const stave = new Stave(currX, 0, staveWidth)\n      if (i === 0) {\n        stave.setWidth(staveWidth + clefAndTimeWidth)\n        stave.addClef(clef).addTimeSignature(timeSignature)\n      }\n      currX += stave.getWidth()\n      stave.setContext(context).draw()\n\n      const processedNotes = notes\n        .map(note => (typeof note === 'string' ? { key: note } : note))\n        .map(note =>\n          Array.isArray(note) ? { key: note[0], duration: note[1] } : note\n        )\n        .map(({ key, ...rest }) =>\n          typeof key === 'string'\n            ? {\n                key: key.includes('/') ? key : `${key[0]}/${key.slice(1)}`,\n                ...rest,\n              }\n            : rest\n        )\n        .map(\n          ({ key, keys, duration = 'q' }) =>\n            new StaveNote({\n              keys: key ? [key] : keys,\n              duration: String(duration),\n            })\n        )\n      rendered = Formatter.FormatAndDraw(context, stave, processedNotes, {\n\n        auto_beam: true,\n      })\n    })\n  }, [staves])\n\n  return <div ref={container} />\n}",{"ruleId":"14","severity":1,"message":"15","line":74,"column":6,"nodeType":"16","endLine":74,"endColumn":38,"suggestions":"17"},{"ruleId":"14","severity":1,"message":"15","line":107,"column":6,"nodeType":"16","endLine":107,"endColumn":51,"suggestions":"18"},{"ruleId":"14","severity":1,"message":"19","line":75,"column":6,"nodeType":"16","endLine":75,"endColumn":14,"suggestions":"20"},"react-hooks/exhaustive-deps","React Hook useCallback has an unnecessary dependency: 'midiSounds.current'. Either exclude it or remove the dependency array. Mutable values like 'midiSounds.current' aren't valid dependencies because mutating them doesn't re-render the component.","ArrayExpression",["21"],["22"],"React Hook useEffect has missing dependencies: 'clef', 'height', 'timeSignature', and 'width'. Either include them or remove the dependency array.",["23"],{"desc":"24","fix":"25"},{"desc":"26","fix":"27"},{"desc":"28","fix":"29"},"Update the dependencies array to be: [instrument]",{"range":"30","text":"31"},"Update the dependencies array to be: [instrument, composition]",{"range":"32","text":"33"},"Update the dependencies array to be: [clef, height, staves, timeSignature, width]",{"range":"34","text":"35"},[2388,2420],"[instrument]",[3296,3341],"[instrument, composition]",[1986,1994],"[clef, height, staves, timeSignature, width]"]